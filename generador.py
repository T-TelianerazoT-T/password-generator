#!/usr/bin/env python3
"""
Generador de Contrase√±as Seguras - Versi√≥n Completa
Autor: Elian Erazo
Carrera: ING. Ciberseguridad
Materia: L√≥gica de Programaci√≥n
"""

import secrets
import string
import random
import os
import subprocess
import sys
import smtplib
from typing import List, Tuple
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Usamos SystemRandom para operaciones de mezcla segura
_sysrand = random.SystemRandom()

class PasswordGenerator:
    def __init__(self):
        self.password = ""
        self.length = 0
        self.use_special_chars = True
    
    def limpiar_pantalla(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def configurar_parametros(self) -> Tuple[int, bool]:
        print("\n" + "="*50)
        print("üîê GENERADOR DE CONTRASE√ëAS SEGURAS")
        print("="*50)
        
        # Solicitar longitud
        while True:
            try:
                length = int(input("\nüìè Longitud de la contrase√±a (m√≠nimo 8 caracteres): "))
                if length >= 8:
                    break
                else:
                    print("‚ùå La longitud m√≠nima debe ser 8 caracteres")
            except ValueError:
                print("‚ùå Por favor, ingrese un n√∫mero v√°lido")
        
        # Solicitar si incluir caracteres especiales
        while True:
            especiales = input("‚ú® ¬øIncluir caracteres especiales? (s/n): ").lower().strip()
            if especiales in ['s', 'si', 's√≠', 'y', 'yes']:
                use_special = True
                break
            elif especiales in ['n', 'no']:
                use_special = False
                break
            else:
                print("‚ùå Por favor, responda 's' o 'n'")
        
        return length, use_special
    
    def generar_contrasena(self, length: int, use_special_chars: bool) -> str:        
        # Conjuntos de caracteres b√°sicos
        mayusculas = string.ascii_uppercase
        minusculas = string.ascii_lowercase
        digitos = string.digits
        
        # Caracteres especiales (excluyendo caracteres ambiguos)
        especiales = "!@#$%&*()-_=+[]{};:,.<>?/|~"
        
        # Definir los conjuntos a usar
        conjuntos = [mayusculas, minusculas, digitos]
        if use_special_chars:
            conjuntos.append(especiales)
        
        # Seleccionar al menos un car√°cter de cada conjunto
        password_chars = []
        for conjunto in conjuntos:
            password_chars.append(secrets.choice(conjunto))
        
        # Combinar todos los conjuntos para llenar el resto
        todos_caracteres = ''.join(conjuntos)
        
        # A√±adir caracteres aleatorios hasta alcanzar la longitud
        while len(password_chars) < length:
            password_chars.append(secrets.choice(todos_caracteres))
        
        # Mezclar de forma segura
        _sysrand.shuffle(password_chars)
        
        # Convertir a string
        self.password = ''.join(password_chars)
        self.length = length
        self.use_special_chars = use_special_chars
        
        return self.password
    
    def copiar_portapapeles(self):
        try:
            # Para Windows
            if os.name == 'nt':
                command = 'echo ' + self.password.strip() + '| clip'
                os.system(command)
            
            # Para macOS
            elif os.name == 'posix' and sys.platform == 'darwin':
                process = subprocess.Popen('pbcopy', universal_newlines=True, stdin=subprocess.PIPE)
                process.communicate(self.password)
            
            # Para Linux
            elif os.name == 'posix':
                process = subprocess.Popen(['xclip', '-selection', 'clipboard'], stdin=subprocess.PIPE)
                process.communicate(self.password.encode('utf-8'))
            
            print("‚úÖ Contrase√±a copiada al portapapeles")
            
        except Exception as e:
            print(f"‚ùå Error al copiar al portapapeles: {e}")
            print("üí° Puede copiar manualmente: ", self.password)
    
    def guardar_archivo(self):
        try:
            filename = "contrasena_segura_DEEM.txt"
            
            # Verificar si el archivo ya existe y agregar n√∫mero
            counter = 1
            original_filename = filename
            while os.path.exists(filename):
                name, ext = os.path.splitext(original_filename)
                filename = f"{name}_{counter}{ext}"
                counter += 1
            
            with open(filename, 'w', encoding='utf-8') as file:
                file.write("="*50 + "\n")
                file.write("üîê CONTRASE√ëA SEGURA GENERADA\n")
                file.write("="*50 + "\n\n")
                file.write(f"Contrase√±a: {self.password}\n")
                file.write(f"Longitud: {self.length} caracteres\n")
                file.write(f"Caracteres especiales: {'S√≠' if self.use_special_chars else 'No'}\n")
                file.write(f"Fecha de generaci√≥n: {self.obtener_fecha_actual()}\n\n")
                file.write("Generado por: Elian Erazo\n")
                file.write("Carrera: ING. Ciberseguridad\n")
                file.write("Materia: L√≥gica de Programaci√≥n\n")
                file.write("="*50 + "\n")
            
            ruta_completa = os.path.abspath(filename)
            print(f"‚úÖ Contrase√±a guardada en: {ruta_completa}")
            
            # Abrir el archivo autom√°ticamente (opcional)
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(ruta_completa)
                elif os.name == 'posix':  # macOS/Linux
                    subprocess.call(('open' if sys.platform == 'darwin' else 'xdg-open', ruta_completa))
            except:
                pass  # Si falla abrir el archivo, no es cr√≠tico
                
        except Exception as e:
            print(f"‚ùå Error al guardar archivo: {e}")
    
    def obtener_fecha_actual(self):
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def enviar_correo(self):
        try:
            print("\nüìß ENV√çO POR CORREO ELECTR√ìNICO")
            print("=" * 40)
            
            print("Para enviar por correo necesitar√°s:")
            print("1. Tu email de Gmail")
            print("2. Contrase√±a de aplicaci√≥n (no la contrase√±a normal)")
            print("3. Conexi√≥n a internet")
            
            continuar = input("\n¬øDeseas continuar? (s/n): ").lower().strip()
            if continuar not in ['s', 'si', 's√≠']:
                return
            
            print("\nüîß CONFIGURACI√ìN DE CORREO")
            print("-" * 25)
            
            # Solicitar credenciales
            email_from = input("Tu email de Gmail: ").strip()
            email_password = input("Contrase√±a de aplicaci√≥n: ").strip()
            email_to = input("Email destino: ").strip()
            
            # Validar emails
            if not all(['@' in email_from, '@' in email_to]):
                print("‚ùå Los emails deben ser v√°lidos")
                return
            
            # Configuraci√≥n Gmail
            smtp_server = "smtp.gmail.com"
            smtp_port = 587
            
            # Crear mensaje
            msg = MIMEMultipart()
            msg['From'] = email_from
            msg['To'] = email_to
            msg['Subject'] = "üîê Contrase√±a Segura Generada"
            
            body = f"""
            ¬°Hola!
            
            Se ha generado una nueva contrase√±a segura para ti.
            
            üìã DETALLES:
            ‚Ä¢ Contrase√±a: {self.password}
            ‚Ä¢ Longitud: {self.length} caracteres
            ‚Ä¢ Caracteres especiales: {'S√≠' if self.use_special_chars else 'No'}
            ‚Ä¢ Fecha: {self.obtener_fecha_actual()}
            
            üîí Recomendaciones:
            - No compartas esta contrase√±a
            - Gu√°rdala en un lugar seguro
            - C√°mbiala peri√≥dicamente
            
            Generado por: Elian Erazo - ING. Ciberseguridad
            """
            
            msg.attach(MIMEText(body, 'plain'))
            
            # Enviar correo
            print("\n‚è≥ Enviando correo...")
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.sendmail(email_from, email_to, msg.as_string())
            server.quit()
            
            print("‚úÖ Correo enviado exitosamente!")
            print("üì® Revisa la bandeja de entrada del destinatario")
            
        except smtplib.SMTPAuthenticationError:
            print("\n‚ùå Error de autenticaci√≥n")
            print("üí° Aseg√∫rate de:")
            print("   - Usar una CONTRASE√ëA DE APLICACI√ìN (no tu contrase√±a normal)")
            print("   - Tener verificaci√≥n en 2 pasos activada en Gmail")
            print("   - Los datos est√©n correctamente escritos")
            
        except smtplib.SMTPConnectError:
            print("\n‚ùå Error de conexi√≥n")
            print("üí° Verifica tu conexi√≥n a internet")
            
        except Exception as e:
            print(f"\n‚ùå Error al enviar correo: {e}")
            print("üí° Consejos:")
            print("   - Revisa que todos los datos est√©n correctos")
            print("   - Aseg√∫rate de tener conexi√≥n a internet")
            print("   - Verifica la configuraci√≥n de tu cuenta Gmail")
    
    def mostrar_fortaleza(self):
        print("\nüìä AN√ÅLISIS DE FORTALEZA:")
        print("-" * 30)
        
        # Calcular complejidad aproximada
        caracteres_unicos = len(set(self.password))
        porcentaje_unicos = (caracteres_unicos / self.length) * 100
        
        print(f"‚Ä¢ Longitud: {self.length} caracteres")
        print(f"‚Ä¢ Caracteres √∫nicos: {caracteres_unicos} ({porcentaje_unicos:.1f}%)")
        print(f"‚Ä¢ Tipos de caracteres incluidos:")
        print(f"  - May√∫sculas: {'S√≠' if any(c.isupper() for c in self.password) else 'No'}")
        print(f"  - Min√∫sculas: {'S√≠' if any(c.islower() for c in self.password) else 'No'}")
        print(f"  - D√≠gitos: {'S√≠' if any(c.isdigit() for c in self.password) else 'No'}")
        print(f"  - Especiales: {'S√≠' if any(not c.isalnum() for c in self.password) else 'No'}")
        
        # Evaluaci√≥n simple
        if self.length >= 12 and porcentaje_unicos > 70:
            print("üí™ Fortaleza: MUY FUERTE")
        elif self.length >= 10:
            print("üëç Fortaleza: FUERTE")
        else:
            print("‚ö†Ô∏è  Fortaleza: MODERADA")
    
    def mostrar_menu_opciones(self):
        while True:
            print("\n" + "="*50)
            print("üéØ OPCIONES DISPONIBLES:")
            print("="*50)
            print("1. üìã Copiar al portapapeles")
            print("2. üíæ Guardar en archivo")
            print("3. üìß Enviar por correo")
            print("4. üìä Mostrar an√°lisis de fortaleza")
            print("5. üîÑ Generar nueva contrase√±a")
            print("6. üö™ Salir del programa")
            print("="*50)
            
            opcion = input("Seleccione una opci√≥n (1-6): ").strip()
            
            if opcion == "1":
                self.copiar_portapapeles()
            elif opcion == "2":
                self.guardar_archivo()
            elif opcion == "3":
                self.enviar_correo()
            elif opcion == "4":
                self.mostrar_fortaleza()
            elif opcion == "5":
                print("\nüîÑ Generando nueva contrase√±a...")
                return True  # Indicar que se debe reiniciar
            elif opcion == "6":
                print("\nüëã ¬°Gracias por usar el Generador de Contrase√±as Seguras!")
                print("Elian Erazo - ING. Ciberseguridad")
                return False  # Indicar que se debe salir
            else:
                print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
    
    def ejecutar(self):
        reiniciar = True
        
        while reiniciar:
            self.limpiar_pantalla()
            
            # Configurar par√°metros
            length, use_special = self.configurar_parametros()
            
            # Generar contrase√±a
            password = self.generar_contrasena(length, use_special)
            
            # Mostrar resultado
            self.limpiar_pantalla()
            print("\n" + "="*50)
            print("‚úÖ CONTRASE√ëA GENERADA EXITOSAMENTE")
            print("="*50)
            print(f"üîë Contrase√±a: {password}")
            print(f"üìè Longitud: {length} caracteres")
            print(f"‚ú® Caracteres especiales: {'S√≠' if use_special else 'No'}")
            print("="*50)
            
            # Mostrar men√∫ de opciones
            reiniciar = self.mostrar_menu_opciones()

def main():
    try:
        # Crear instancia del generador
        generador = PasswordGenerator()
        
        # Ejecutar el generador
        generador.ejecutar()
        
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrumpido. ¬°Hasta pronto!")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        input("Presione Enter para continuar...")

if __name__ == "__main__":
    main()
